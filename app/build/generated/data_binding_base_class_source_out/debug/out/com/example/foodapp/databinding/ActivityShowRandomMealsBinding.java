// Generated by view binder compiler. Do not edit!
package com.example.foodapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.foodapp.R;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.CollapsingToolbarLayout;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityShowRandomMealsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final CollapsingToolbarLayout CollapsingToolbar;

  @NonNull
  public final AppBarLayout appBar;

  @NonNull
  public final TextView area;

  @NonNull
  public final FloatingActionButton btnFloat;

  @NonNull
  public final MaterialCardView cardView;

  @NonNull
  public final ImageView image;

  @NonNull
  public final ImageView imageYouTube;

  @NonNull
  public final TextView instructor;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final LinearProgressIndicator progress;

  @NonNull
  public final TextView tvArea;

  @NonNull
  public final TextView tvCategory;

  @NonNull
  public final TextView tvCategoryItem;

  private ActivityShowRandomMealsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull CollapsingToolbarLayout CollapsingToolbar, @NonNull AppBarLayout appBar,
      @NonNull TextView area, @NonNull FloatingActionButton btnFloat,
      @NonNull MaterialCardView cardView, @NonNull ImageView image, @NonNull ImageView imageYouTube,
      @NonNull TextView instructor, @NonNull NestedScrollView nestedScrollView,
      @NonNull LinearProgressIndicator progress, @NonNull TextView tvArea,
      @NonNull TextView tvCategory, @NonNull TextView tvCategoryItem) {
    this.rootView = rootView;
    this.CollapsingToolbar = CollapsingToolbar;
    this.appBar = appBar;
    this.area = area;
    this.btnFloat = btnFloat;
    this.cardView = cardView;
    this.image = image;
    this.imageYouTube = imageYouTube;
    this.instructor = instructor;
    this.nestedScrollView = nestedScrollView;
    this.progress = progress;
    this.tvArea = tvArea;
    this.tvCategory = tvCategory;
    this.tvCategoryItem = tvCategoryItem;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityShowRandomMealsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityShowRandomMealsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_show_random_meals, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityShowRandomMealsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Collapsing_toolbar;
      CollapsingToolbarLayout CollapsingToolbar = ViewBindings.findChildViewById(rootView, id);
      if (CollapsingToolbar == null) {
        break missingId;
      }

      id = R.id.appBar;
      AppBarLayout appBar = ViewBindings.findChildViewById(rootView, id);
      if (appBar == null) {
        break missingId;
      }

      id = R.id.area;
      TextView area = ViewBindings.findChildViewById(rootView, id);
      if (area == null) {
        break missingId;
      }

      id = R.id.btn_float;
      FloatingActionButton btnFloat = ViewBindings.findChildViewById(rootView, id);
      if (btnFloat == null) {
        break missingId;
      }

      id = R.id.cardView;
      MaterialCardView cardView = ViewBindings.findChildViewById(rootView, id);
      if (cardView == null) {
        break missingId;
      }

      id = R.id.image;
      ImageView image = ViewBindings.findChildViewById(rootView, id);
      if (image == null) {
        break missingId;
      }

      id = R.id.imageYouTube;
      ImageView imageYouTube = ViewBindings.findChildViewById(rootView, id);
      if (imageYouTube == null) {
        break missingId;
      }

      id = R.id.instructor;
      TextView instructor = ViewBindings.findChildViewById(rootView, id);
      if (instructor == null) {
        break missingId;
      }

      id = R.id.nestedScrollView;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.progress;
      LinearProgressIndicator progress = ViewBindings.findChildViewById(rootView, id);
      if (progress == null) {
        break missingId;
      }

      id = R.id.tvArea;
      TextView tvArea = ViewBindings.findChildViewById(rootView, id);
      if (tvArea == null) {
        break missingId;
      }

      id = R.id.tvCategory;
      TextView tvCategory = ViewBindings.findChildViewById(rootView, id);
      if (tvCategory == null) {
        break missingId;
      }

      id = R.id.tvCategoryItem;
      TextView tvCategoryItem = ViewBindings.findChildViewById(rootView, id);
      if (tvCategoryItem == null) {
        break missingId;
      }

      return new ActivityShowRandomMealsBinding((CoordinatorLayout) rootView, CollapsingToolbar,
          appBar, area, btnFloat, cardView, image, imageYouTube, instructor, nestedScrollView,
          progress, tvArea, tvCategory, tvCategoryItem);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
